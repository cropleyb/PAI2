How to unit test pai2?

Components
----------
AlphaBeta - Mock out Bridge as template

MoveSuggester
Utility Calculator
Utility Stats
Game State
ABBridge? Or is this the Game/Game State?

US
--
board locations: (these are shared with move suggestor)
total counts/length for each player
  "      "  /caps    "    "    "
  "      "  /threats "    "    "

other measurements:
caps for each player (should also be used by move suggestor)
  "      "  /enc. 4s "    "    "
chessboard counts

Index + BoardStrip -> Loc
start of strip + direction * index
can this be done with ints? probably :)

who calls who?
Game::make move
    setOcc
		before - iterate over masks for board strip
			length lookup table access
			convert indices to Locs
			update move suggestor/utility data
		update board strip data (place/capture 1 piece)
		after - iterate over masks for board strip
			length lookup table access
			convert indices to Locs
			update move suggestor/utility data

/LengthLookupTable -> LineLookupTable
 / lineLookupTable is a raw array of LinePatterns, keyed on 10 bit patterns
 / add support for takes, threats, half-blocked 4s
BoardDirectionRep
 - 2d array of U64[MAX_DIRS][2*MAX_CANDS]
 - bit representation of whole board
 - direction (Loc offset)
 - convert from ind to Loc and back (via SpanEntry)
 - beforeSetOcc(loc, colour, posStats)
 - afterSetOcc(loc, colour, posStats)
 - Uses lengthLookupTable
// BoardReps
 // - 4x BoardDirectionReps
 // - setOcc(loc, colour, posStats)
Game
 - BoardRep
/PriorityLevel
 - Priority levels must be searched in order of decreasing counts per candidate
 - Sort on demand. Quicksort variant? Natural Merge sort?
 - Dirty bit
PositionStats
 /- PriorityLevel * 4 for line lengths
 /- PriorityLevel * 2 for takes and threats
 /- report(span, pattern, colour) converts pattern indices to locs
 /- Captured counts
 - Chessboard counts
/CandidateCache
 /- max depth * max breadth array of Locs
 /- max depth * number of Locs
 /- max depth * next Loc index
/ MoveSuggester = old PriorityFilter
 /- All except PL sorting
/AlphaBeta
 /- first cut
/SpanLookupTable
 /- Array of SpanEntries (1 per Loc on the board)
 /- Each describes the line that the Loc is on (strip, min, max, etc.)
 /- Converts between index on that line and Locs

BoardStrip indices to Locs during pattern reporting
---------------------------------------------------
- PatternLookupTable passed to matching loop.
  contains entries for each pattern (pre-built)
  same length (5) for everything
  duplicate entries for "don't care" points
  edge matching?
  - struct for LineEntry?
  - LinePattern types (cands): Take (1), Threat (2), Length (5-n), HalfBlocked4 (0)
  - array of indices of candidates?
- ind2loc func passed into matcher too? No, one level up.
- array of Locs passed to reporting function
- Matcher templated on Reporter, contains one instance
- Reporter takes conversion func/obj in each reporting method, passed from match()
- is this a DirectionStrip?

Game.makeMove(Loc)
    checkForCaptures(Loc)
	for each direction
		(DirectionStrip)
		captures.extend(process_direction_captures(ds, move_pos, MC)
	for each direction
		(DirectionStrip)
        lookup Span in array by Loc: ds index, min, max, loc index, base loc, direction loc per index val
		before set occ
		    (LineMatcher)
		    match(U64, ds, span, inc = -1)
			    (Uses singleton? LineLookupTable)
			    for each match
			        reporter.report(LineEntry, index offset, ds, inc)
					    (Reporter)
						Use ds to convert indices to Locs
						switch on LineEntry type
						PositionStats.report*(Locs)
		set occ(from span, colour)
		after set occ
		    match(inc = 1)
			    (as above)
		    

Threats & Line2s
How to deal with threats in the lookup table?
Most (but not all) threats are also Line2s.
Lookup a second table if we detect a Threat, and report that too.

Edges for diagonal reps need different length EDGEs.
Iterate through each strip. Iterate around the 4 edges to get all the
SpanEntries. Lookup _maxIndex, and call setOcc(EDGE)

empty board is not empty - (0,0) is P1 (?)
Line1 is being subtracted from first.
dir not incrementing in span_lookup_table loop???
which dir is causing the problem?
- turns out that the board strips were not being initialised in the constructor.

How to create a PenteGame instance
----------------------------------
Alph-Beta just needs to know about the PG instance, not the other way around.
PG contains BoardReps, PositionStats, MoveSuggester, MoveHistory

Capture flow
------------
PenteGame makeMove
  short circuit - must be a Take for that Loc in the PositionStats
  checks for pattern match in each direction
  report to PositionStats in same way as for Line1 etc.?
  Must also report or return the captures back to PenteGame to call setOcc and update the MoveHistory.
  MH needs the Locs, PosStats only needs a total count, so PG should do the conversions to Locs, and report to the PosStats.
  Or PG should pass in a Loc buffer (from MH) to BoardReps for it to populate.

UtilCalc accessing PS
---------------------
Template UC on PS - so we can mock PS for unit tests
But how will UC use PS? friend class?
UC (currently) just uses the counts of patterns for each player

Putting it all together
-----------------------
Create ABBridge, which contains the PenteGame.
Or use PenteGame as the bridge, by deriving it from IABBridge?
Unit Test get next move, utility etc.

Subsystem tests
---------------
test_dont_waste_a_pair:

Assertion failed: (l._value<=MAX_LOCS), function setOcc, file /Users/cropleyb/Dropbox/pai2/src/board_reps.cpp, line 68.

setOcc is being passed a Loc::INVALID

Remaining
---------
/ sorting candidates per level in the priority levels
checkerboard
half-blocked to PosStats
/ half-blocked scoring
optimise transposition table to reduce copying for store?
CMD line interface?
Integrate with python code
Configuration a la AIGenome
Test turning off the TT?

Crash???
--------
What's going on?

[ RUN      ] AISubsystemFixture.test_strange
Assertion failed: (l._value>=0), function setOcc, file /Users/cropleyb/Dropbox/pai2/src/board_reps.cpp, line 61.
 P1 P2 P1 P2 P1 P2 P1/bin/bash: line 1: 90981 Abort trap: 6           debug/tests

This is coming from the MoveSuggester. How is it getting there?
I thought this was working?
- Debug it
1. More asserts
- Analyse source
- Analyse source changes

Which PriorityLevel class is best:
- unsorted. lower playing ability than pai1
- sorted by separate dirty bit sort call. Messy?
- sorted incrementally. yes

- node indexed by Loc directly (array) - is this the slowdown? probably.
- node indexed by Loc indirectly (sep. array). yes

Based on:
PriorityLevel - easier? Hmmm.
PriorityLevel2 - yeah

LengthLookupTable
4 ** 5 = 2 ** 10 = 1024 slots - lots of lookups.
Quick check: 1024 bits = 32 slots of 32 bit uints.

Use from python code
--------------------
/ String based API in the C++ code.
Build a library with CMake first? static lib? dynamic lib?
Or build the C++ code directly from setup.py as a cython extension?
NOGIL? Yes! Yay!

./tests --gtest_filter="*bad*" > bad.txt

What next?
----------
run AI equiv. for C++ code
Use run_ai.py to compare Py and C++ AIs
  - Add support for other board sizes
  - Pass more params to pai2: standard vs tournament
Include py openings DB
...Port openings DB to C++ for Pente.org? when needed...
// Analyse some more bad play.
// Add sort of lowest level of included PL candidates (by decreasing count)

AB extra pruning?
initiative detection
Fukami in utility score?
More detailed opening strategy
restrict getPriorityLevels when there is an opponent's open 3, and boost the depth for that branch.

2 searches: wide & shallow; narrow & deep?

VCT
trigger at max depth, if we have the initiative?
e.g.
we have a 3, they don't have a 4, and it is our move, just search our 3s.
we have a 3, they don't have a 3, and it is their move, they just search our 3s.
our best level and their best level
if OBL == TBL, initiative == to move
what is important about OBL and TBL is the number of moves to win -
if OBL is 4 then it is one Turn To Win. (TTW)
Does one player always have the initiative?

When should a VCT search be stopped?
// Ours:
When the initiative is reversed?

How do we incorporate VCT and non-VCT search?
ie the VCT search may not give the best position for the player who initiated it.

e.g. at (even) maxdepth. P1 search, P1's turn. Both P1 and P2 have 3s, but no 4s
so P1 has the initiative.
P1 VCT can search all Line3 moves, and choose the AB best cf. the utility at that maxdepth position
maxdepth+1: (odd depth).  P1 search, P2's turn. P2 Must block the 4(s) (or capture it/them)
Termination conds: game won. No more P1 3s to extend.

Loss by continuous threats:
e.g. at (even) maxdepth. P1 search, P1's turn. P2 has a 4
so P2 has the initiative.
P2 VCT can search all Line3 moves, and choose the AB best cf. the utility at that maxdepth position
maxdepth+1: (odd depth).  P1 search, P1's turn. P1 Must block the 4(s) (or capture it/them)
Termination conds: game lost. No more P2 3s to extend.

3 VCTs
P1 (to move): 2xLine3; P2: 3xLine3 inc. 2 doubles

For each player:
If #4s > 0
	TTW = 1
If #takes > 0 && #captured >= 8
	TTW = 1
If #3s > 0
	TTW = 2
If #threats > 0 && #captured >= 8
	TTW = 2
If #takes > 1 && #captured >= 6
    // Assuming the first take opens up a second?
	TTW = 2

When to include the emergency level:
Depth 0 - always need at least one move.
Depth 1..maxDepth-1 - no; the utility func should determine these positions as won or lost, and save some searching(?)
Depth maxDepth - no; this one
Depth >maxDepth (i.e. VCT) - no
-- so just on depth 0

when should we evaluate the util func? max depth and max VCT depth?
VCT positions with the initiative? (TMTW > 1) && (OMTW <= TMTW)
Or VCT posns. where we are not forced? (TMTW > 1)
Or positions with no move suggestions.

When do we need to do more search?
VCT positions where we are forced: (OMTW > 1) and (TMTW == 1)
VCT positions where we can force: (TMTW > 1) and (OMTW == 2)


Rename cutoff?

Max VCT depth?

Attacking blocking stones...
A blocked 4 with a blocking stone that is threatened makes for a MTW value of 2.
How to maintain this? How do we need to query it?
- calculating need for VCT search (ie calc MTW)
- determining candidate moves: threats and takes of MTW structures
  - PL: per candidate (with direction) - a list of occupied Locs for which taking/threatening would be beneficial for the other side.
- utility calc?
So it will need to be accessible through pos stats.

Which structures/stones do we need to track?
- Take end stone (def)
- Blocked Four blockers (att)
- Fours (def)
- Threes (def)
- Blocked Three blockers? (att)
- Threat and Takes - the occupied Locs that can be threatened or taken.

How do we maintain MTW incrementally?

for each blocked four:
	look up the head stone
	can it be taken? -> MTW 2
	can it be threatened? -> MTW 3
	same for XOXXX, XXOXX patterns? Yeah. Blocked 4 for each.
	threatenable, takeable PLs in pos stats, for (currently unplayable) locs 
Is a PriorityLevel appropriate for takeable and threatenable locs?
PLs are for iterating over candidates, whereas we just need to lookup by loc:
for each loc:
	count of takeable directions
	count of threatenable directions
?

Brute force
for each 4: for each of the locs in the line, we can look up the takeable and threatenables
Maintain PL for 4s, blocked4s, takes (threats and takes for each)
Whenever one of these structures is made threatenable or takeable,
we need to adjust the corresponding PL.

Structure
- pattern
- list of relevant locs for that structure type (pattern)
  - e.g. for Line4, all the locs
  - for Blocked, the loc that is blocked
  - for take and threat, the locs that are vulnerable

StructureTable
- collection of structures
- free list (array of structure ids, +head ind)

StructureMap
- for each Loc, a list of indices into the structure table

// Each PriorityLevel entry also needs a structure id.

Move suggester based on MTW rather than priority levels? Or filter the PLs?

Defense:
Collect a list of locs with their stones that we need to take one of for each of their strongest attacks:
e.g. Their Line4 - takes must take one of the Line4 stones
e.g. Their Takes (if the threaten a win by caps) - we must take their stone at the end.
perhaps a list of most threatening structures for each player?

Why is PAI2 still not as strong as PAI1?
Set up some test cases (AI subsystem) and do some parallel debugging

Types of important caps
-----------------------
Blocked4Take (the blocker of our 4)
Their 4 (any of the stones)
TheirTake (the attacking stone)
Then defensive versions of each, ahead of standard versions of each - we get these for free if they are incrementally maintained for both sides.

Mostly the same for threats...
(4->3)

SpecialOccsTable
Counts of important features per loc:

We don't care *which* structure is threatened, only the type of structure (and the counts)
So for each loc, we need a count with a max of:
count of: 4s, blocked four blockers & take stones - for each colour.
4s: 5 x 4 = 20 => 5 bits
blocked four blockers: 5 x 4 = 20 => 5 bits
take stones: 2 x 4 = 8 => 3 bits
total: 13 bits

BBB.aBBB.: 5 x 4 = 20 => 5 bits

CapTable
Directions and dist from possible take triggers per loc.
For normal pente there are 2 distances * 8 directions = 16 bits per loc.
	void addCap(Loc trigger, DirectionType dir, CompressedLoc offset, int inc)

Need one of each table type per colour

Use these tables to populate new PriorityLevels:

Pattern types
LinePatternTypes are currently used for the spaces that can be played on
AND
the priority levels used by the move suggestor:

enum LinePatternType
{
	NoPattern=0,
	Line1=1,
	Line2=2,
	Threat=3,
	Line3=4,
	Take=5,
	Line4=6,
    Line5=7,
	Blocked=8,
	MAX_LINE_PATTERN_TYPE=9
};

There are now more capture related priority pattern types:
	FourTake      // any of the stones
	FourBlockTake // the blocker of our 4
	TakeTake      // the attacking stone
	...as well as a raw take

Ordering for MS?
Neither FourTake is relevant by that point as neither player has a four.
Our FourBlockTake and Our TakeTake are good, as are their versions of FT and TT.

OFBT TFBT OTT TTT


Where do these go?
	inherit from enum?
	parallel enum?
	cast to new enum for PLs?

The LinePattern class needs to report a new list of these important indices.
For takes there are 2 types, one for us, one for them.
At the LinePattern level, there is only 1 LinePatternType.

# Add flag to PosStats to switch on TakeTargeting
# Modify MoveSuggester to use new PLs
# New unit tests for MS
# Use new PLs in PenteGame for VCT calc
# Use new PLs in UtilCalc
# Add Locs to LinePattern for capturable stones
# Create PLs from LinePatterns (with SpecialOccsTable and CapTable) in PosStats
# Test with maintenance only (no usage)
# Test with each usage individually:
# - util calc (slightly faster)
# - MSG (faster)
# - PG for VCT
RunAI
- compare with w/o MSG mod?
- try different weightings for the 3 new util vars:
	_takeBlocked4ScoreBase = 500; // Guesses for take targeting
	_takeTakeScoreBase = 500;
	_takeFourScoreBase = 500;

Colour swaps and pattern types for take targeting
-------------------------------------------------
Target pattern  Special         Take              High level pattern
(incoming col)  (store)         (incoming&store)  (update)
Line4 P1        four P2(4)      Take P2 _takes    FourTake P2
Take P1         take P2(1)      Take P2 _takes    TakeTake P2
Blocked4 P1     blocked4s P1(1) Take P1 _takes    Blocked4Take P1

Hmmm still not as good as PAI1?!
Turn off PAI2 features and find example(s) where PAI2 comes up with a different result.
- VCT
- Stripe value
- Take Targeting
- set other old values back to PAI1 defaults

PAI1 runai, add PAI2 features, see what breaks it.
Does PAI2 equal PAI1 with PAI1 settings?

PAI2 run AI seems to be giving opposite results?!

Ideas from Pente Strategy book
------------------------------
# piece on board weighting for caps/takes/threats or checkerboard contrib.
subtypes in utility function - single gap 2s and Trias (continuous 3s) should be worth extra.
Triangles
3d patterns in opening
opening strategy

Subtypes
--------
#Add subtypes to LinePatterns - added flag Tria or Potential
 xxx..
 .xxx.
 ..xxx
 x.x..
 .x.x.
 ..x.x
Count them in PosStats
Use them in UtilCalc

Fukami?
-------

